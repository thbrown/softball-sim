buildscript {
    repositories {
      google()
      mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
  id 'java'
  id 'application'
  id 'com.diffplug.spotless' version '6.11.0'
  id "com.github.gradle-lean" version "0.1.2"
}

java {
  // All code in this repository must build against Java 11 for GCP functions compatibility
  // If you just want to get the tool running locally w/ a different version a Java, go ahead and comment out these lines
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

repositories {
  mavenCentral()
}

dependencies {
  testImplementation group: 'junit', name: 'junit', version: '4.12'
  testImplementation group: 'com.j2html', name: 'j2html', version: '1.4.0'
  testImplementation group: 'com.vladsch.flexmark', name: 'flexmark', version: '0.50.50'
  testImplementation group: 'com.vladsch.flexmark', name: 'flexmark-all', version: '0.50.50'
  testImplementation group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: 'r136'
  
  implementation  group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
  implementation  group: 'org.apache.commons', name: 'commons-math3', version: '3.6'
  implementation  group: 'commons-cli', name: 'commons-cli', version: '1.4'
  implementation  group: 'com.google.cloud.functions', name: 'functions-framework-api', version: '1.0.2'
  implementation  group: 'com.google.cloud', name: 'google-cloud-storage', version: '1.113.4'
  implementation  group: 'com.google.apis', name: 'google-api-services-compute', version: 'v1-rev20210907-1.32.1'
}

run {
  args = ["-O", "MONTE_CARLO_ADAPTIVE", "-P", "1OiRCCmrn16iyK,00000000000001,0000000000000f,0000000000000k,1CV6WRyspDjA7Z","1MPJ24EEyS0g6p", "-g", "100000", "-i", "7"]
}

jar {
  manifest {
    attributes "Main-Class": "com.github.thbrown.softballsim.SoftballSim"
  }
  
  // Copy the definition files into the executable jar
  from ('docs/definitions') {
    into 'docs/definitions'
  }
 
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}


test {
	exclude '**/tools/**'
    //testLogging.showStandardStreams = true // Show logging during test runs
}
 
 
sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
    resources {
      srcDirs = ['test/resources']
    }
  }
  gallery {
  	java {
      srcDirs = ['gallery']
  	}
  	compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath 
    runtimeClasspath += output + compileClasspath + configurations.runtimeClasspath
  }
}

tasks.withType(Jar) {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

spotless {
  java {
  	//removeUnusedImports()
  	eclipse().configFile 'code-format.xml'
  }
}

task message {
  doLast {
    println "Build completed: " + new Date().format('MM/dd/yyyy HH:mm:ss')
    println "Build successful: output jar can be found in ./build/libs"
    println "Run with `java -jar ./build/libs/softball-sim.jar`"
  }
}

task generateGalleryHtml(type: Test) {  
  testClassesDirs = sourceSets.gallery.output.classesDirs
  classpath = sourceSets.gallery.runtimeClasspath
  outputs.upToDateWhen { false } // Gradle doesn't know that changes in the ./json affects the output html
  doFirst {
    println "Generating ./docs/index.html for Optimization Gallery..."
  }
}

def outputJar = "${buildDir}/libs/${rootProject.name}.jar"
task proguard(type: proguard.gradle.ProGuardTask) {
   //configuration 'proguard.conf'
   injars "${outputJar}"
   outjars "${buildDir}/libs/${rootProject.name}_proguard.jar"
   // As of Java 9, the runtime classes are packaged in modular jmod files.
   libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
   dontwarn
   verbose
   keepattributes 'SourceFile,LineNumberTable'
   target "11"
   keep "class com.github.thbrown.** { * ; }"
   // GCP looks for this interface on functions deploy (and fails if it's not there), it also requires keeping some enum functionalyt
   // Dispite these changes, the proguard altered jar still doesn't work in gcp functions (current issue is 404 when upserting a blob)
   keep "public interface com.google.cloud.functions.HttpFunction"
   keepclassmembers "enum * { public static **[] values(); public static ** valueOf(java.lang.String);}"
   optimizations "!library/gson" // https://github.com/Guardsquare/proguard/issues/47
   dontobfuscate // Messes up casting and serialization
   doLast {
      delete("${outputJar}")
      def file = new File("${buildDir}/libs/${rootProject.name}_proguard.jar")
      def newFile = new File("${buildDir}/libs/${rootProject.name}.jar")
      file.renameTo(newFile)
    }
 }

// Generate the gallery html as part of the build process
assemble.finalizedBy generateGalleryHtml

// Optimize the jar
assemble.finalizedBy proguard

// Print the message after nuild is complete
assemble.finalizedBy message

// Auto format files on build
assemble.dependsOn spotlessApply

// Define the main class for the application
mainClassName = 'com.github.thbrown.softballsim.SoftballSim'